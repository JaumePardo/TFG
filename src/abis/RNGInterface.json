{
  "contractName": "RNGInterface",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomNumber",
          "type": "uint256[]"
        }
      ],
      "name": "RandomNumberCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomNumberRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getLastRequestId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requestFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lockBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "isRequestComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "randomNum1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomNum2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randNum3",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomNumber\",\"type\":\"uint256[]\"}],\"name\":\"RandomNumberCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLastRequestId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"isRequestComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNum1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNum2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randNum3\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RandomNumberCompleted(uint32,uint256[])\":{\"params\":{\"randomNumber\":\"The random number produced by the 3rd-party service\",\"requestId\":\"The indexed ID of the request used to get the results of the RNG service\"}},\"RandomNumberRequested(uint32,address)\":{\"params\":{\"requestId\":\"The indexed ID of the request used to get the results of the RNG service\",\"sender\":\"The indexed address of the sender of the request\"}}},\"kind\":\"dev\",\"methods\":{\"getLastRequestId()\":{\"returns\":{\"requestId\":\"The last request id used in the last request\"}},\"getRequestFee()\":{\"returns\":{\"feeToken\":\"The address of the token that is used to pay fees\",\"requestFee\":\"The fee required to be paid to make a request\"}},\"isRequestComplete(uint32)\":{\"details\":\"For time-delayed requests, this function is used to check/confirm completion\",\"params\":{\"requestId\":\"The ID of the request used to get the results of the RNG service\"},\"returns\":{\"isCompleted\":\"True if the request has completed and a random number is available, false otherwise\"}},\"requestRandomNumber()\":{\"details\":\"Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF\",\"returns\":{\"lockBlock\":\"The block number at which the RNG service will start generating time-delayed randomness. The calling contract should \\\"lock\\\" all activity until the result is available via the `requestId`\",\"requestId\":\"The ID of the request used to get the results of the RNG service\"}}},\"title\":\"Random Number Generator Interface\",\"version\":1},\"userdoc\":{\"events\":{\"RandomNumberCompleted(uint32,uint256[])\":{\"notice\":\"Emitted when an existing request for a random number has been completed\"},\"RandomNumberRequested(uint32,address)\":{\"notice\":\"Emitted when a new request for a random number has been submitted\"}},\"kind\":\"user\",\"methods\":{\"getLastRequestId()\":{\"notice\":\"Gets the last request id used by the RNG service\"},\"getRequestFee()\":{\"notice\":\"Gets the Fee for making a Request against an RNG service\"},\"isRequestComplete(uint32)\":{\"notice\":\"Checks if the request for randomness from the 3rd-party service has completed\"},\"requestRandomNumber()\":{\"notice\":\"Sends a request for a random number to the 3rd-party service\"}},\"notice\":\"Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/RNGInterface.sol\":\"RNGInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/src/contracts/RNGInterface.sol\":{\"keccak256\":\"0xe37d6ab6c720e61e13df4db51f05908d731f5a68e58bff377e2e458f3ae612a5\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b152bb8deb8e32f4bc8fff93b901ccac17f5220e7a88e2b8f2b83622e365dcf7\",\"dweb:/ipfs/QmZbo5cJFCqp1pJC6sho2bd2JyAKHCi2mSgfi54S8EcW8E\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.6;\n\n/**\n * @title Random Number Generator Interface\n * @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\n */\ninterface RNGInterface {\n    /**\n     * @notice Emitted when a new request for a random number has been submitted\n     * @param requestId The indexed ID of the request used to get the results of the RNG service\n     * @param sender The indexed address of the sender of the request\n     */\n    event RandomNumberRequested(\n        uint32 indexed requestId,\n        address indexed sender\n    );\n\n    /**\n     * @notice Emitted when an existing request for a random number has been completed\n     * @param requestId The indexed ID of the request used to get the results of the RNG service\n     * @param randomNumber The random number produced by the 3rd-party service\n     */\n    event RandomNumberCompleted(\n        uint32 indexed requestId,\n        uint256[] randomNumber\n    );\n\n    /**\n     * @notice Gets the last request id used by the RNG service\n     * @return requestId The last request id used in the last request\n     */\n    function getLastRequestId() external view returns (uint32 requestId);\n\n    /**\n     * @notice Gets the Fee for making a Request against an RNG service\n     * @return feeToken The address of the token that is used to pay fees\n     * @return requestFee The fee required to be paid to make a request\n     */\n    function getRequestFee()\n        external\n        view\n        returns (address feeToken, uint256 requestFee);\n\n    /**\n     * @notice Sends a request for a random number to the 3rd-party service\n     * @dev Some services will complete the request immediately, others may have a time-delay\n     * @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n     * @return requestId The ID of the request used to get the results of the RNG service\n     * @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.\n     * The calling contract should \"lock\" all activity until the result is available via the `requestId`\n     */\n    function requestRandomNumber()\n        external\n        returns (uint32 requestId, uint32 lockBlock);\n\n    /**\n     * @notice Checks if the request for randomness from the 3rd-party service has completed\n     * @dev For time-delayed requests, this function is used to check/confirm completion\n     * @param requestId The ID of the request used to get the results of the RNG service\n     * @return isCompleted True if the request has completed and a random number is available, false otherwise\n     */\n    function isRequestComplete(uint32 requestId)\n        external\n        view\n        returns (bool isCompleted);\n\n    function randomNumber(uint32 requestId)\n        external\n        returns (\n            uint256 randomNum1,\n            uint256 randomNum2,\n            uint256 randNum3\n        );\n}\n",
  "sourcePath": "/mnt/d/pardo/Desktop/Treballs/TFG/TFG/tfg/src/contracts/RNGInterface.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/RNGInterface.sol",
    "exportedSymbols": {
      "RNGInterface": [
        3821
      ]
    },
    "id": 3822,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3763,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:23:21"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "RNGInterface",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3764,
          "nodeType": "StructuredDocumentation",
          "src": "62:180:21",
          "text": " @title Random Number Generator Interface\n @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)"
        },
        "fullyImplemented": false,
        "id": 3821,
        "linearizedBaseContracts": [
          3821
        ],
        "name": "RNGInterface",
        "nameLocation": "253:12:21",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 3765,
              "nodeType": "StructuredDocumentation",
              "src": "272:259:21",
              "text": " @notice Emitted when a new request for a random number has been submitted\n @param requestId The indexed ID of the request used to get the results of the RNG service\n @param sender The indexed address of the sender of the request"
            },
            "eventSelector": "cf635b20f2defc1e71326dc4f0b616fa676e29a5bae87da19fcaddc550b33f03",
            "id": 3771,
            "name": "RandomNumberRequested",
            "nameLocation": "542:21:21",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 3770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3767,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "588:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3771,
                  "src": "573:24:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3766,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "573:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3769,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "623:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3771,
                  "src": "607:22:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3768,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "563:72:21"
            },
            "src": "536:100:21"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 3772,
              "nodeType": "StructuredDocumentation",
              "src": "642:274:21",
              "text": " @notice Emitted when an existing request for a random number has been completed\n @param requestId The indexed ID of the request used to get the results of the RNG service\n @param randomNumber The random number produced by the 3rd-party service"
            },
            "eventSelector": "71efb36ad56b61830958b1e868abc1fef46fa9ce08328d6443da98754859e37e",
            "id": 3779,
            "name": "RandomNumberCompleted",
            "nameLocation": "927:21:21",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 3778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3774,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "973:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3779,
                  "src": "958:24:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3773,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "958:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3777,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "randomNumber",
                  "nameLocation": "1002:12:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3779,
                  "src": "992:22:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3775,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "992:7:21",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 3776,
                    "nodeType": "ArrayTypeName",
                    "src": "992:9:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "948:72:21"
            },
            "src": "921:100:21"
          },
          {
            "documentation": {
              "id": 3780,
              "nodeType": "StructuredDocumentation",
              "src": "1027:145:21",
              "text": " @notice Gets the last request id used by the RNG service\n @return requestId The last request id used in the last request"
            },
            "functionSelector": "19c2b4c3",
            "id": 3785,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getLastRequestId",
            "nameLocation": "1186:16:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1202:2:21"
            },
            "returnParameters": {
              "id": 3784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3783,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1235:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3785,
                  "src": "1228:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3782,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1228:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1227:18:21"
            },
            "scope": 3821,
            "src": "1177:69:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3786,
              "nodeType": "StructuredDocumentation",
              "src": "1252:229:21",
              "text": " @notice Gets the Fee for making a Request against an RNG service\n @return feeToken The address of the token that is used to pay fees\n @return requestFee The fee required to be paid to make a request"
            },
            "functionSelector": "0d37b537",
            "id": 3793,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRequestFee",
            "nameLocation": "1495:13:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3787,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1508:2:21"
            },
            "returnParameters": {
              "id": 3792,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3789,
                  "mutability": "mutable",
                  "name": "feeToken",
                  "nameLocation": "1566:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3793,
                  "src": "1558:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3788,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1558:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3791,
                  "mutability": "mutable",
                  "name": "requestFee",
                  "nameLocation": "1584:10:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3793,
                  "src": "1576:18:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3790,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1576:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1557:38:21"
            },
            "scope": 3821,
            "src": "1486:110:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3794,
              "nodeType": "StructuredDocumentation",
              "src": "1602:588:21",
              "text": " @notice Sends a request for a random number to the 3rd-party service\n @dev Some services will complete the request immediately, others may have a time-delay\n @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n @return requestId The ID of the request used to get the results of the RNG service\n @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.\n The calling contract should \"lock\" all activity until the result is available via the `requestId`"
            },
            "functionSelector": "8678a7b2",
            "id": 3801,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestRandomNumber",
            "nameLocation": "2204:19:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3795,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2223:2:21"
            },
            "returnParameters": {
              "id": 3800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3797,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "2267:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3801,
                  "src": "2260:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3796,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2260:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3799,
                  "mutability": "mutable",
                  "name": "lockBlock",
                  "nameLocation": "2285:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3801,
                  "src": "2278:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3798,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2278:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2259:36:21"
            },
            "scope": 3821,
            "src": "2195:101:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3802,
              "nodeType": "StructuredDocumentation",
              "src": "2302:393:21",
              "text": " @notice Checks if the request for randomness from the 3rd-party service has completed\n @dev For time-delayed requests, this function is used to check/confirm completion\n @param requestId The ID of the request used to get the results of the RNG service\n @return isCompleted True if the request has completed and a random number is available, false otherwise"
            },
            "functionSelector": "3a19b9bc",
            "id": 3809,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isRequestComplete",
            "nameLocation": "2709:17:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3805,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3804,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "2734:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3809,
                  "src": "2727:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3803,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2727:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2726:18:21"
            },
            "returnParameters": {
              "id": 3808,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3807,
                  "mutability": "mutable",
                  "name": "isCompleted",
                  "nameLocation": "2797:11:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3809,
                  "src": "2792:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3806,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2792:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2791:18:21"
            },
            "scope": 3821,
            "src": "2700:110:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "9d2a5f98",
            "id": 3820,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "randomNumber",
            "nameLocation": "2825:12:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3812,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3811,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "2845:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3820,
                  "src": "2838:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 3810,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2838:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2837:18:21"
            },
            "returnParameters": {
              "id": 3819,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3814,
                  "mutability": "mutable",
                  "name": "randomNum1",
                  "nameLocation": "2911:10:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3820,
                  "src": "2903:18:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3813,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2903:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3816,
                  "mutability": "mutable",
                  "name": "randomNum2",
                  "nameLocation": "2943:10:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3820,
                  "src": "2935:18:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3815,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2935:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3818,
                  "mutability": "mutable",
                  "name": "randNum3",
                  "nameLocation": "2975:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 3820,
                  "src": "2967:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3817,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2967:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2889:104:21"
            },
            "scope": 3821,
            "src": "2816:178:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3822,
        "src": "243:2753:21",
        "usedErrors": []
      }
    ],
    "src": "37:2960:21"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-10-28T09:23:02.772Z",
  "devdoc": {
    "events": {
      "RandomNumberCompleted(uint32,uint256[])": {
        "params": {
          "randomNumber": "The random number produced by the 3rd-party service",
          "requestId": "The indexed ID of the request used to get the results of the RNG service"
        }
      },
      "RandomNumberRequested(uint32,address)": {
        "params": {
          "requestId": "The indexed ID of the request used to get the results of the RNG service",
          "sender": "The indexed address of the sender of the request"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getLastRequestId()": {
        "returns": {
          "requestId": "The last request id used in the last request"
        }
      },
      "getRequestFee()": {
        "returns": {
          "feeToken": "The address of the token that is used to pay fees",
          "requestFee": "The fee required to be paid to make a request"
        }
      },
      "isRequestComplete(uint32)": {
        "details": "For time-delayed requests, this function is used to check/confirm completion",
        "params": {
          "requestId": "The ID of the request used to get the results of the RNG service"
        },
        "returns": {
          "isCompleted": "True if the request has completed and a random number is available, false otherwise"
        }
      },
      "requestRandomNumber()": {
        "details": "Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF",
        "returns": {
          "lockBlock": "The block number at which the RNG service will start generating time-delayed randomness. The calling contract should \"lock\" all activity until the result is available via the `requestId`",
          "requestId": "The ID of the request used to get the results of the RNG service"
        }
      }
    },
    "title": "Random Number Generator Interface",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RandomNumberCompleted(uint32,uint256[])": {
        "notice": "Emitted when an existing request for a random number has been completed"
      },
      "RandomNumberRequested(uint32,address)": {
        "notice": "Emitted when a new request for a random number has been submitted"
      }
    },
    "kind": "user",
    "methods": {
      "getLastRequestId()": {
        "notice": "Gets the last request id used by the RNG service"
      },
      "getRequestFee()": {
        "notice": "Gets the Fee for making a Request against an RNG service"
      },
      "isRequestComplete(uint32)": {
        "notice": "Checks if the request for randomness from the 3rd-party service has completed"
      },
      "requestRandomNumber()": {
        "notice": "Sends a request for a random number to the 3rd-party service"
      }
    },
    "notice": "Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)",
    "version": 1
  }
}